WEBVTT

00:00:01.406 --> 00:00:03.986 align:middle
Una de las locuras de JavaScript...

00:00:04.216 --> 00:00:08.766 align:middle
¡es que no hay una buena manera de
hacer un bucle sobre una colección!

00:00:09.466 --> 00:00:12.926 align:middle
En PHP, tenemos foreach,
y funciona perfectamente.

00:00:13.676 --> 00:00:17.726 align:middle
Pero en JavaScript, tienes que crear
un feo bucle personalizado for.

00:00:18.656 --> 00:00:23.476 align:middle
Bueno, en realidad, existe una función
.forEach(), pero sólo funciona con matrices,

00:00:23.926 --> 00:00:28.346 align:middle
no con otras cosas que puedan ser objeto de bucle,
como el objeto Set del que hablaremos más adelante.

00:00:29.436 --> 00:00:34.236 align:middle
Y, con .forEach(), no hay break si
quieres salir del bucle antes de tiempo.

00:00:34.986 --> 00:00:38.276 align:middle
Por eso hemos utilizado el $.each() de jQuery.

00:00:38.866 --> 00:00:39.456 align:middle
Pero, ¿adivina qué?

00:00:40.006 --> 00:00:43.266 align:middle
ES2015 soluciona esto, por fin.

00:00:43.936 --> 00:00:46.366 align:middle
Presentamos el bucle for of

00:00:46.676 --> 00:00:56.996 align:middle
Su aspecto es el siguiente: for (let repLog of
data.items): Y es bastante fácil de seguir:

00:00:57.576 --> 00:01:03.846 align:middle
repLog es la nueva variable dentro del bucle, y
data.items es lo que queremos recorrer en bucle.

00:01:05.056 --> 00:01:09.436 align:middle
Ya no le pasamos una función anónima, así
que podemos deshacernos de todo lo demás.

00:01:10.056 --> 00:01:10.926 align:middle
Eso es todo.

00:01:11.086 --> 00:01:15.836 align:middle
Saluda a tu nuevo mejor amigo: el bucle for of.

00:01:17.246 --> 00:01:20.846 align:middle
Busquemos los otros puntos de
$.each() y actualicemos también esos

00:01:21.706 --> 00:01:30.206 align:middle
En su lugar, digamos que para let
fieldData of $form.serializeArray(): Antes,

00:01:30.446 --> 00:01:34.466 align:middle
la función anónima recibía
una clave y luego el fieldData.

00:01:34.466 --> 00:01:40.346 align:middle
Pero, en realidad, no necesitábamos la clave: la
función $.each() sólo nos obligaba a añadirla.

00:01:40.956 --> 00:01:42.516 align:middle
Ahora, ¡las cosas están más limpias!

00:01:43.866 --> 00:01:51.046 align:middle
Haz este mismo cambio en dos lugares más:
para $element of $form.find(':input').

00:01:55.386 --> 00:02:14.166 align:middle
Ah, no olvides tu let o var: Luego, uno más
abajo: para let $element of $elements : ¡Ah,

00:02:14.166 --> 00:02:18.756 align:middle
y PhpStorm me avisa porque he olvidado
eliminar uno de mis paréntesis de cierre!

00:02:19.366 --> 00:02:20.946 align:middle
Y, ¡no necesitamos ese punto y coma!

00:02:21.286 --> 00:02:27.746 align:middle
¡Sí! Así que, ¡utiliza
el bucle for of para todo!

00:02:28.426 --> 00:02:32.016 align:middle
Bueno, en realidad, eso no es 100% cierto.

00:02:32.846 --> 00:02:37.886 align:middle
for of es perfecto cuando quieres hacer un
bucle sobre una colección de elementos.

00:02:38.636 --> 00:02:42.636 align:middle
Pero, si quieres hacer un bucle
sobre una matriz asociativa...

00:02:42.956 --> 00:02:50.306 align:middle
u objeto, y necesitas conocer la clave de
cada elemento, entonces utilizarás for in.

00:02:51.146 --> 00:02:55.476 align:middle
Esta es la única limitación
de for of: te da el valor

00:02:55.476 --> 00:02:59.186 align:middle
del elemento sobre el que haces el
bucle, pero no su clave, o índice.

00:02:59.186 --> 00:03:04.066 align:middle
De hecho, si intentas utilizar for
of con un objeto, obtendrás un error
